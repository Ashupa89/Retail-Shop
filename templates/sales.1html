{% extends 'base.html' %}
{% block content %}
<div class="row g-4">
    <!-- Product List -->
    <div class="col-lg-6">
        <div class="card shadow-sm border-0 h-100">
            <div class="card-header bg-primary text-white fw-bold">Available Products</div>

            <div class="card-body p-0">
                <table class="table table-hover align-left mb-0">
                    <thead class="table-light">
                    <tr>
                        <th>Name</th>
                        <th>Cost Price</th>
                        <th>Qty</th>
                    </tr>
                    </thead>
                    <tbody>
                    {% for p in products %}
                    <tr>
                        <td>{{ p.name }}</td>
                        <td>₹{{ '%.2f'|format(p.cost_price) }}</td>
                        <td>{{ p.quantity }}</td>
                    </tr>
                    {% endfor %}
                    </tbody>
                </table>
            </div>
        </div>
    </div>

    <!-- Create Sale -->
    <div class="col-lg-6">
        <div class="card shadow-sm border-0 h-100 d-flex flex-column">

            <div class="card-header bg-primary text-white fw-bold">Create Sale</div>

            <!-- Scrollable form area -->
            <div class="card-body overflow-auto" style="flex: 1 1 auto; max-height: 65vh;">
                <form id="saleForm" class="d-flex flex-column h-100" novalidate>
                    <!-- Customer -->
                    <div class="mb-3">
                        <label for="customer" class="form-label fw-semibold">Customer Name</label>
                        <input type="text" class="form-control" id="customer" placeholder="Enter customer name" required>
                        <div class="invalid-feedback">Customer name cannot be empty.</div>
                    </div>

                    <!-- Inline validation message container -->
                    <div id="formError" class="text-danger mb-3" role="alert" style="display:none;"></div>

                    <!-- Items container -->
                    <div id="items"></div>

                    <!-- Add item -->
                    <div class="d-flex justify-content-end mb-3">
                        <button id="addItem" class="btn btn-outline-secondary btn-sm" type="button">
                            <i class="bi bi-plus-circle me-1"></i> Add Item
                        </button>
                    </div>
                </form>
            </div>

            <!-- Sticky footer -->
            <div class="p-3 border-top bg-light">
                <div class="d-flex justify-content-between align-items-center mb-2">
                    <h5 class="fw-bold mb-0">Total:</h5>
                    <h5 class="fw-bold text-success mb-0 fs-4">₹<span id="totalAmount">0.00</span></h5>
                </div>
                <div class="d-grid">
                    <button type="submit" form="saleForm" class="btn btn-primary btn-lg">
                        <i class="bi bi-receipt-cutoff me-1"></i> Create Invoice
                    </button>
                </div>
                <div id="invoiceLink" class="mt-3 text-center"></div>
            </div>
        </div>
    </div>
</div>

<!-- Hidden template for sale item -->
<div id="itemTemplate" style="display:none;">
    <div class="input-group mb-2 sale-item align-items-center">
        <select class="form-select product-select" aria-label="Select product" required>
            <option value="" disabled selected>Select a product</option>
            {% for p in products %}
            <option value="{{ p.id }}" data-price="{{ p.cost_price }}" data-stock="{{ p.quantity }}">
                {{ p.name }} — ₹{{ '%.2f'|format(p.cost_price) }} (Stock: {{ p.quantity }})
            </option>
            {% endfor %}
        </select>
        <input type="number" min="1" value="1" class="form-control item-qty text-center"
               style="max-width:90px" aria-label="Quantity" required>
        <span class="input-group-text item-subtotal bg-light fw-bold" style="min-width:100px">₹0.00</span>
        <button class="btn btn-outline-danger remove-item" type="button" aria-label="Remove item">
            <i class="bi bi-trash"></i>
        </button>
    </div>
</div>

<script>
    const submitBtn = document.querySelector('button[type="submit"]');
    const formError = document.getElementById('formError');

    function attachRemove(node) {
        node.querySelector('.remove-item').addEventListener('click', () => {
            node.remove();
            updateProductOptions();
            updateTotals();
            updateRemoveButtons();
        });
    }

    function updateRemoveButtons() {
        const items = document.querySelectorAll('.sale-item');
        items.forEach(item => {
            const btn = item.querySelector('.remove-item');
            btn.disabled = items.length === 1;
        });
    }

    function updateProductOptions() {
        const selects = document.querySelectorAll('.product-select');
        const selectedValues = Array.from(selects)
            .map(s => s.value)
            .filter(v => v !== '');

        selects.forEach(select => {
            Array.from(select.options).forEach(opt => {
                opt.disabled = selectedValues.includes(opt.value) && opt.value !== select.value && opt.value !== '';
            });
        });
    }

    function updateTotals() {
        let total = 0;
        document.querySelectorAll('.sale-item').forEach(item => {
            const selectedOption = item.querySelector('.product-select').selectedOptions[0];
            if (!selectedOption || !selectedOption.dataset.price) {
                item.querySelector('.item-subtotal').textContent = '₹0.00';
                return;
            }
            const price = parseFloat(selectedOption.dataset.price);
            const qty = parseInt(item.querySelector('.item-qty').value) || 0;
            const subtotal = price * qty;
            total += subtotal;
            item.querySelector('.item-subtotal').textContent = `₹${subtotal.toFixed(2)}`;
        });
        document.getElementById('totalAmount').textContent = total.toFixed(2);
    }

    function autoPickNextAvailable(select) {
        const allOptions = Array.from(select.options).filter(o => o.value !== '');
        for (let opt of allOptions) {
            if (!opt.disabled) {
                select.value = opt.value;
                return true;
            }
        }
        select.value = '';
        return false;
    }

    function showError(message) {
        formError.textContent = message;
        formError.style.display = 'block';
    }

    function clearError() {
        formError.textContent = '';
        formError.style.display = 'none';
    }

    function limitQtyToStock(item) {
        const select = item.querySelector('.product-select');
        const qtyInput = item.querySelector('.item-qty');

        const selectedOption = select.selectedOptions[0];
        if (!selectedOption) return;

        const stock = parseInt(selectedOption.dataset.stock) || 0;
        qtyInput.max = stock;

        if (parseInt(qtyInput.value) > stock) {
            qtyInput.value = stock;
        }
    }

    // NEW: check if any product left to add
    function canAddNewItem() {
        const allOptions = Array.from(document.querySelectorAll('#itemTemplate .product-select option'))
            .filter(o => o.value !== '');
        const selectedValues = Array.from(document.querySelectorAll('.product-select'))
            .map(s => s.value);
        for (let opt of allOptions) {
            if (!selectedValues.includes(opt.value)) {
                return true;
            }
        }
        return false;
    }

    function createSaleItem() {
        if (!canAddNewItem()) {
            alert("No more products available to add.");
            return;
        }

        const template = document.querySelector('#itemTemplate .sale-item');
        if (!template) {
            console.error('Sale item template not found!');
            return;
        }

        const clone = template.cloneNode(true);
        const select = clone.querySelector('.product-select');
        const qtyInput = clone.querySelector('.item-qty');
        const subtotal = clone.querySelector('.item-subtotal');

        select.value = '';
        qtyInput.value = 1;
        subtotal.textContent = '₹0.00';

        document.getElementById('items').appendChild(clone);
        attachRemove(clone);

        select.addEventListener('change', () => {
            updateProductOptions();
            updateTotals();
            limitQtyToStock(clone);
        });
        qtyInput.addEventListener('input', () => {
            const max = parseInt(qtyInput.max) || 9999;
            if (qtyInput.value < 1) qtyInput.value = 1;
            else if (qtyInput.value > max) qtyInput.value = max;
            updateTotals();
        });

        updateRemoveButtons();
        updateProductOptions();

        const selected = autoPickNextAvailable(select);
        if (!selected) {
            alert("No products available to select.");
            clone.remove();
            return;
        }

        limitQtyToStock(clone);
        updateTotals();
    }

    document.getElementById('addItem').addEventListener('click', () => {
        if (!canAddNewItem()) {
            alert("No more products available to add.");
            return;
        }
        createSaleItem();
    });

    // Initialize with one sale item row
    createSaleItem();

    document.getElementById('saleForm').addEventListener('submit', async (e) => {
        e.preventDefault();
        clearError();

        const customerInput = document.getElementById('customer');
        const customer = customerInput.value.trim();
        if (!customer) {
            showError('Customer name cannot be empty.');
            customerInput.classList.add('is-invalid');
            customerInput.focus();
            return;
        } else {
            customerInput.classList.remove('is-invalid');
        }

        const itemNodes = Array.from(document.querySelectorAll('.sale-item'));
        const items = [];

        for (let n of itemNodes) {
            const prodSelect = n.querySelector('.product-select');
            const prod = prodSelect.value;
            const qtyInput = n.querySelector('.item-qty');
            const qty = parseInt(qtyInput.value);

            if (!prod) {
                showError('Please select a product for all rows.');
                prodSelect.classList.add('is-invalid');
                prodSelect.focus();
                return;
            } else {
                prodSelect.classList.remove('is-invalid');
            }
            if (!qty || qty < 1) {
                showError('Quantity must be 1 or more.');
                qtyInput.classList.add('is-invalid');
                qtyInput.focus();
                return;
            } else {
                qtyInput.classList.remove('is-invalid');
            }

            const maxStock = parseInt(prodSelect.selectedOptions[0].dataset.stock) || 0;
            if (qty > maxStock) {
                showError(`Quantity for product exceeds available stock (${maxStock}).`);
                qtyInput.classList.add('is-invalid');
                qtyInput.focus();
                return;
            }

            items.push({product_id: prod, qty});
        }

        if (items.length === 0) {
            showError('Add at least one item.');
            return;
        }

        submitBtn.disabled = true;
        submitBtn.innerHTML = `<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Creating...`;

        try {
            const res = await fetch('/create-sale', {
                method: 'POST',
                headers: {'Content-Type': 'application/json'},
                body: JSON.stringify({customer_name: customer, items})
            });

            const j = await res.json();

            if (j.invoice_no) {
                document.getElementById('invoiceLink').innerHTML =
                    `<a href="/invoice/${j.invoice_no}" target="_blank" class="btn btn-outline-success btn-lg">
                      <i class="bi bi-file-earmark-text me-1"></i> Open Invoice ${j.invoice_no}
                    </a>`;

                // Reset form for new sale
                customerInput.value = '';
                const itemsContainer = document.getElementById('items');
                itemsContainer.innerHTML = '';
                createSaleItem();
                updateTotals();
                updateProductOptions();
                clearError();

            } else {
                showError('Error creating invoice.');
            }
        } catch (error) {
            showError('Network or server error occurred.');
        } finally {
            submitBtn.disabled = false;
            submitBtn.innerHTML = `<i class="bi bi-receipt-cutoff me-1"></i> Create Invoice`;
        }
    });
</script>
{% endblock %}
